/*
Consigna: "Cat√°logo simple de juegos de estrategia"
Crear una peque√±a aplicaci√≥n web que muestre una lista de juegos de estrategia. Debe incluir:
*Una lista de juegos precargados en un array (m√≠nimo 6).
Un input para buscar juegos por nombre.
Un bot√≥n que permita volver a mostrar todos los juegos luego de filtrar.
El listado se debe renderizar en una etiqueta <ul> con elementos <li>.

‚úÖ Al iniciar, se deben mostrar todos los juegos.
‚úÖ Al escribir en el input, se deben filtrar por coincidencia parcial del nombre (no exacta).
‚úÖ Si no hay coincidencias, debe mostrar un mensaje que lo indique.
‚úÖ El bot√≥n de "Mostrar todos" debe limpiar el filtro y volver a listar todos los juegos.
*/

const juegosEstrategia = [
    // Estrategia en tiempo real (RTS)
    { nombre: "Age of Empires II", categoria: "RTS", emoji: "üè∞" },
    { nombre: "StarCraft", categoria: "RTS", emoji: "üëΩ" },
    { nombre: "Warcraft III", categoria: "RTS", emoji: "‚öîÔ∏è" },
    { nombre: "Company of Heroes", categoria: "RTS", emoji: "ü™ñ" },
    { nombre: "Total Annihilation", categoria: "RTS", emoji: "ü§ñ" },
    { nombre: "Command & Conquer: Red Alert 2", categoria: "RTS", emoji: "üõ∞Ô∏è" },
    { nombre: "Stronghold", categoria: "RTS", emoji: "üõ°Ô∏è" },
    
    // Estrategia por turnos (TBS)
    { nombre: "Heroes of Might and Magic III", categoria: "TBS", emoji: "üêâ" },
    { nombre: "Advance Wars", categoria: "TBS", emoji: "üöÅ" },
    { nombre: "Wargroove", categoria: "TBS", emoji: "üéñÔ∏è" },
    { nombre: "XCOM: Enemy Unknown", categoria: "TBS", emoji: "üëæ" },

    // Estrategia 4X
    { nombre: "Civilization IV", categoria: "4X", emoji: "üåç" },
    { nombre: "Stellaris", categoria: "4X", emoji: "ü™ê" },
    { nombre: "Endless Legend", categoria: "4X", emoji: "üìú" },
    { nombre: "Master of Orion II", categoria: "4X", emoji: "üöÄ" },

    // Tycoon / Simulaci√≥n econ√≥mica
    { nombre: "RollerCoaster Tycoon 2", categoria: "Tycoon", emoji: "üé¢" },
    { nombre: "Zoo Tycoon", categoria: "Tycoon", emoji: "ü¶ì" },
    { nombre: "Game Dev Tycoon", categoria: "Tycoon", emoji: "üíæ" },
    { nombre: "Transport Tycoon Deluxe", categoria: "Tycoon", emoji: "üöÇ" },
    { nombre: "Two Point Hospital", categoria: "Tycoon", emoji: "üè•" },

    // City Builders
    { nombre: "SimCity 4", categoria: "City Builder", emoji: "üèôÔ∏è" },
    { nombre: "Cities: Skylines", categoria: "City Builder", emoji: "üåÜ" },
    { nombre: "Caesar III", categoria: "City Builder", emoji: "üèõÔ∏è" },
    { nombre: "Banished", categoria: "City Builder", emoji: "üå≤" },
    { nombre: "Pharaoh", categoria: "City Builder", emoji: "ü¶Ç" },

    // Otros / h√≠bridos
    { nombre: "Crusader Kings II", categoria: "Gran Estrategia", emoji: "üëë" },
    { nombre: "Europa Universalis IV", categoria: "Gran Estrategia", emoji: "üìñ" },
    { nombre: "RimWorld", categoria: "Colony Sim", emoji: "üöÄ" },
    { nombre: "Factorio", categoria: "Automation", emoji: "‚öôÔ∏è" },
    { nombre: "Frostpunk", categoria: "Survival Strategy", emoji: "‚ùÑÔ∏è" },
    { nombre: "Oxygen Not Included", categoria: "Colony Sim", emoji: "üß™" }
];


let lista = document.querySelector("#listaJuegos");
let buscador = document.querySelector("#input")
let btnMostrarTodos = document.querySelector("#btnMostrarTodos");

function mostrarJuegos(juegosEstrategia){
    lista.innerHTML = "";

    if(juegosEstrategia.length === 0){
        const li = document.createElement("li");
        li.textContent = "No se encontraron resultados.";
        lista.appendChild(li);
        return;
    }

    juegosEstrategia.forEach(juego => {
        const li = document.createElement("li");
        li.classList.add("juegosEstrategia")
        li.textContent = `${juego.emoji} ${juego.nombre} | ${juego.categoria}`
        lista.appendChild(li)
        return;
    });
}

function filtrarJuego(){
    const textoIngresado = buscador.value.toLowerCase();

    const filtro = juegosEstrategia.filter(juegos =>
    (juegos.nombre.toLowerCase().includes(textoIngresado) ||
    juegos.categoria.toLowerCase().includes(textoIngresado))
    )
    mostrarJuegos(filtro)
}


btnMostrarTodos.addEventListener("click", () =>{
    buscador.value = "";
    mostrarJuegos(juegosEstrategia)
})

buscador.addEventListener("input", filtrarJuego)

mostrarJuegos(juegosEstrategia)